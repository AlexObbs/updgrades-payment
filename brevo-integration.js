// brevo-integration.js - Make sure this file has all functions properly exported
const SibApiV3Sdk = require('sib-api-v3-sdk');

// Configure Brevo API client
const configureBrevoClient = () => {
  const defaultClient = SibApiV3Sdk.ApiClient.instance;
  const apiKey = defaultClient.authentications['api-key'];
  apiKey.apiKey = process.env.BREVO_API_KEY || 'YOUR_BREVO_API_KEY'; // Your Brevo API key here
  return new SibApiV3Sdk.TransactionalEmailsApi();
};

// Send email using Brevo API
const sendEmailWithBrevoApi = async (to, subject, htmlContent, senderName = 'KenyaOnABudget Safaris') => {
  try {
    const apiInstance = configureBrevoClient();
    
    // Create sender
    const sender = {
      name: senderName,
      email: 'info@kenyaonabudgetsafaris.co.uk',
    };
    
    // Create email
    const email = {
      sender,
      to: Array.isArray(to) ? to.map(email => ({ email })) : [{ email: to }],
      subject: subject,
      htmlContent: htmlContent,
    };
    
    // Send email
    const data = await apiInstance.sendTransacEmail(email);
    console.log('Email sent via Brevo API:', data);
    return { success: true, data };
  } catch (error) {
    console.error('Error sending email via Brevo API:', error);
    throw error;
  }
};

// Send admin notification immediately after payment
const sendAdminNotification = async (bookingData, items = []) => {
  try {
    // Get admin emails from environment or use default
    const adminEmails = process.env.ADMIN_EMAILS 
      ? process.env.ADMIN_EMAILS.split(',') 
      : ['amiraalexobbs@gmail.com', 'info@kenyaonabudgetsafaris.co.uk'];

    
    if (adminEmails.length === 0) {
      console.warn('No admin emails configured. Skipping admin notification.');
      return { success: false, reason: 'No admin emails configured' };
    }
    
    // Format items if available
    let itemsHtml = '';
    if (items && items.length > 0) {
      itemsHtml = `
        <h3 style="margin-top: 15px; color: #e67e22;">Purchased Upgrades:</h3>
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
          <thead>
            <tr style="background-color: #f5f5f5;">
              <th style="text-align: left; padding: 8px; border: 1px solid #ddd;">Item</th>
              <th style="text-align: center; padding: 8px; border: 1px solid #ddd;">Quantity</th>
              <th style="text-align: right; padding: 8px; border: 1px solid #ddd;">Price</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      items.forEach(item => {
        itemsHtml += `
          <tr>
            <td style="padding: 8px; border: 1px solid #ddd;">${item.title || 'Unknown Item'}</td>
            <td style="text-align: center; padding: 8px; border: 1px solid #ddd;">${item.quantity || 1}</td>
            <td style="text-align: right; padding: 8px; border: 1px solid #ddd;">£${typeof item.price === 'number' ? item.price.toFixed(2) : '0.00'}</td>
          </tr>
        `;
      });
      
      itemsHtml += `
          </tbody>
        </table>
      `;
    }
    
    // Create admin notification content
    const adminHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e6e6e6;">
        <div style="background-color: #e67e22; padding: 20px; text-align: center; color: white;">
          <h1 style="margin: 0;">New Booking Alert</h1>
          <p style="margin: 10px 0 0;">Receipt #${bookingData.bookingId || bookingData.receiptNumber}</p>
        </div>
        
        <div style="padding: 20px;">
          <p>A new booking has been made:</p>
          
          <div style="background-color: #f8f8f8; padding: 15px; margin: 20px 0; border-left: 4px solid #e67e22;">
            <p><strong>Customer:</strong> ${bookingData.customerName || 'Name not provided'} (${bookingData.customerEmail || 'Email not provided'})</p>
            <p><strong>User ID:</strong> ${bookingData.userId || 'Not available'}</p>
            <p><strong>Package:</strong> ${bookingData.packageName || 'Safari Package'}</p>
            <p><strong>Amount Paid:</strong> £${typeof bookingData.amount === 'number' ? bookingData.amount.toFixed(2) : '0.00'}</p>
            <p><strong>Receipt Number:</strong> #${bookingData.bookingId || bookingData.receiptNumber}</p>
            <p><strong>Date:</strong> ${new Date().toLocaleString()}</p>
          </div>
          
          ${itemsHtml}
          
          <p>Please log in to the admin dashboard to view details.</p>
          
          <p style="margin-top: 30px; font-style: italic; color: #666; border-top: 1px solid #eee; padding-top: 15px;">
            This message was auto-generated by the payment system
          </p>
        </div>
      </div>
    `;
    
    // Send to all admins
    console.log(`Sending notification to admins: ${adminEmails.join(', ')}`);
    await sendEmailWithBrevoApi(
      adminEmails,
      `New Booking Alert - Receipt #${bookingData.bookingId || bookingData.receiptNumber}`,
      adminHtml
    );
    
    return { success: true };
  } catch (error) {
    console.error('Error sending admin notification:', error);
    return { success: false, error };
  }
};

// Send receipt to customer (separate from admin notification)
const sendReceiptEmail = async (customerEmail, receiptHtml, bookingData) => {
  try {
    if (!customerEmail) {
      throw new Error('Customer email is required');
    }
    
    console.log(`Sending receipt to customer: ${customerEmail}`);
    
    // Send email
    await sendEmailWithBrevoApi(
      customerEmail,
      `Your KenyaOnABudget Safari Receipt #${bookingData.bookingId || bookingData.receiptNumber}`,
      receiptHtml
    );
    
    return { success: true };
  } catch (error) {
    console.error('Error sending receipt to customer:', error);
    throw error;
  }
};

// Send receipt to customer and admins (for backward compatibility)
const sendReceiptEmails = async (customerEmail, receiptHtml, bookingData, items = []) => {
  try {
    console.log(`Sending receipt to customer: ${customerEmail}`);
    
    // Customer email
    await sendEmailWithBrevoApi(
      customerEmail,
      `Your KenyaOnABudget Safari Receipt #${bookingData.bookingId || bookingData.receiptNumber}`,
      receiptHtml
    );
    
    // Admin notification (if not already sent)
    await sendAdminNotification(bookingData, items);
    
    return { success: true };
  } catch (error) {
    console.error('Error sending receipt emails:', error);
    throw error;
  }
};

// Export all functions
module.exports = {
  sendEmailWithBrevoApi,
  sendReceiptEmails,
  sendReceiptEmail,
  sendAdminNotification
};